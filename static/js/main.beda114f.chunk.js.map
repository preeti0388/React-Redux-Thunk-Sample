{"version":3,"sources":["apis/jsonPlaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postReducer.js","reducers/usersReducer.js","index.js"],"names":["axios","create","baseURL","fetchPosts","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","response","wrap","_context2","prev","next","jsonPlaceholder","get","sent","type","payload","data","stop","_x3","apply","this","arguments","fetchUser","id","_ref3","_callee3","_context3","concat","_x4","UserHeader","user","props","react_default","createElement","className","name","React","Component","connect","state","ownProps","users","find","userId","PostList","fetchPostsAndUsers","posts","map","post","key","title","body","components_UserHeader","renderList","_ref","_callee","getState","_context","_","uniq","forEach","_x","_x2","App","components_PostList","combineReducers","length","undefined","action","toConsumableArray","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.beda114f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n   baseURL: 'https://jsonplaceholder.typicode.com'\r\n});","import _ from 'lodash';\r\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\r\n\r\n\r\n//Get all unique userId's from list of posts, iterate over unique userids and fetch user for each userid\r\n\r\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\r\n \r\n //Action Creators inside an Action Creator\r\n    await dispatch(fetchPosts());\r\n\r\n   const userIds = _.uniq( _.map(getState().posts,'userId'));\r\n   userIds.forEach(id => dispatch(fetchUser(id))); \r\n };\r\n\r\n\r\n//Action Creator returning a function using Redux-Thunk\r\nexport const fetchPosts =  () => async dispatch => {\r\n\r\nconst response =  await jsonPlaceholder.get('/posts');\r\n\r\ndispatch({type: 'FETCH_POSTS', payload: response.data})\r\n \r\n };\r\n\r\nexport const fetchUser = id => async dispatch => {\r\n\r\n   const response =  await jsonPlaceholder.get(`/users/${id}`);\r\n   dispatch({type: 'FETCH_USER', payload: response.data});\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass UserHeader extends React.Component {\r\n\r\n\t\r\n\r\n\trender () {\r\n           const { user } = this.props; \r\n           if(!user) {\r\n           \treturn null;\r\n           }\r\n\r\n           return <div className=\"header\">{user.name}</div>\r\n\t}\r\n}\r\n\r\n//Instead of passing whole data, only passing particular userId using ownProps\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n\treturn {user: state.users.find(user => user.id===ownProps.userId)};\r\n\t\r\n\t\r\n};\r\n\r\nexport default connect(mapStateToProps) (UserHeader);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPostsAndUsers} from '../actions';\r\nimport UserHeader from './UserHeader';\r\n\r\nclass PostList extends React.Component{\r\n   componentDidMount() {\r\n   \t//this.props.fetchPosts();\r\n   \tthis.props.fetchPostsAndUsers();\r\n   }\r\n\r\nrenderList(){\r\n\r\n\treturn this.props.posts.map(post=> {\r\n     \r\n     return (\r\n            <div className = \"item\" key={post.id}>\r\n            <i className = \"large middle aligned icon user\" />\r\n            <div className = \"content\">\r\n            <div className = \"description\">\r\n\r\n            <h2>{post.title}</h2>\r\n            <p>{post.body} </p>\r\n            </div>\r\n            <UserHeader userId = {post.userId}/>\r\n           </div>\r\n          </div> \r\n     \t);\r\n\r\n\t});\r\n}\r\n\r\n   render(){\r\n   \t\r\n   \treturn <div className=\"ui relaxed divided list\">{this.renderList()}</div>;\r\n   }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n\treturn {posts: state.posts}\r\n}\r\nexport default connect(mapStateToProps, { fetchPostsAndUsers }) (PostList);","import React from 'react';\r\nimport PostList from './PostList';\r\n\r\nconst App = () => {\r\n\r\nreturn <div className=\"ui container\"> <PostList /> </div>\r\n\r\n};\r\n\r\nexport default App;","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\nimport usersReducer from './usersReducer'\r\n\r\nexport default combineReducers ({\r\n\r\n\tposts: postReducer,\r\n\tusers: usersReducer\r\n});","export default (state=[], action) => {\r\n\r\n\tswitch (action.type) {\r\n\r\n\t\t case 'FETCH_POSTS':\r\n\t\t  return action.payload;\r\n\r\n\t\t  default:\r\n            return state;\r\n\t}\r\n};","export default (state=[], action) => {\r\n\r\n\tswitch (action.type) {\r\n\r\n\t\t case 'FETCH_USER':\r\n\t\t  return [...state, action.payload];\r\n\r\n\t\t  default:\r\n            return state;\r\n\t}\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n\r\n\t<Provider store={store}>\r\n     <App />\r\n     </Provider>,\r\n     document.querySelector('#root')\r\n\t);"],"sourceRoot":""}